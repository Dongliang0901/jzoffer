前序遍历：根左右，中序遍历：左根右，后序遍历：左右根
根据前序遍历，确定root的位置，在中序遍历中，根据root位置将队列分为左子树和右子树部分
再分别通过前序遍历的位置进行递归分割

public class Solution {
    HashMap<Integer, Integer> map = new HashMap<>();
    int[] pre;
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        int preLen = pre.length;
        int inLen = in.length;
        this.pre = pre;
        if(preLen != inLen){
            return new TreeNode(0);
        }
        for(int i = 0; i < inLen; i++){
            map.put(in[i], i);
        }
        return helper(0, preLen - 1, 0, inLen - 1);
    }

    private TreeNode helper(int preLeft, int preRight, int inLeft, int inRight){
        if(preLeft > preRight || inLeft > inRight){
            return null;
        }
        int pivot = pre[preLeft];
        TreeNode root = new TreeNode(pivot);
        int pivotIndex = map.get(pivot);
        root.left = helper(preLeft + 1, pivotIndex - inLeft + preLeft, inLeft, pivotIndex - 1);
        root.right = helper(pivotIndex - inLeft + preLeft + 1, preRight, pivotIndex + 1, inRight);
        return root;
    }
}